var mod_pagespeed_s1uejYiZ6Z = "\nconst embedpressDocViewer = {};\n\ndocument.addEventListener(\"fullscreenchange\", () => {\n    if (!document.fullscreenElement) {\n        const viwerParentEl = document.querySelector('.ep-file-download-option-masked.fullscreen-enabled');\n        if (viwerParentEl) {\n            viwerParentEl.classList.remove(\"fullscreen-enabled\");\n            viwerParentEl.querySelector(\".ep-doc-minimize-icon\").style.display = 'none';\n            viwerParentEl.querySelector(\".ep-doc-fullscreen-icon\").style.display = 'flex';\n        }\n    }\n});\n\ndocument.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"Escape\") {\n        const viwerParentEl = document.querySelector('.ep-file-download-option-masked.fullscreen-enabled');\n        if (viwerParentEl) {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            }\n        }\n    }\n});\n\n\nembedpressDocViewer.getColorBrightness = (hexColor) => {\n    const r = parseInt(hexColor.slice(1, 3), 16);\n    const g = parseInt(hexColor.slice(3, 5), 16);\n    const b = parseInt(hexColor.slice(5, 7), 16);\n\n    // Convert the RGB color to HSL\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n\n    // Calculate the brightness position in percentage\n    const brightnessPercentage = Math.round(l / 255 * 100);\n\n    return brightnessPercentage;\n}\n\nembedpressDocViewer.adjustHexColor = (hexColor, percentage) => {\n    // Convert hex color to RGB values\n    const r = parseInt(hexColor.slice(1, 3), 16);\n    const g = parseInt(hexColor.slice(3, 5), 16);\n    const b = parseInt(hexColor.slice(5, 7), 16);\n\n    // Calculate adjusted RGB values\n    const adjustment = Math.round((percentage / 100) * 255);\n    const newR = Math.max(Math.min(r + adjustment, 255), 0);\n    const newG = Math.max(Math.min(g + adjustment, 255), 0);\n    const newB = Math.max(Math.min(b + adjustment, 255), 0);\n\n    // Convert adjusted RGB values back to hex color\n    const newHexColor = '#' + ((1 << 24) + (newR << 16) + (newG << 8) + newB).toString(16).slice(1);\n\n    return newHexColor;\n}\n\nembedpressDocViewer.viewerStyle = () => {\n    const viwerParentEls = document.querySelectorAll('.ep-file-download-option-masked');\n\n    let customStyle = document.getElementById('custom-styles') || document.createElement('style');\n    customStyle.id = 'custom-styles';\n    customStyle.type = 'text/css';\n    customStyle.innerHTML = ''\n\n    if (viwerParentEls !== null) {\n        viwerParentEls.forEach((el) => {\n            let customColor = el.getAttribute('data-custom-color');\n            if (customColor == null) {\n                return false;\n            }\n            let colorBrightness = embedpressDocViewer.getColorBrightness(customColor);\n            let docId = el.getAttribute('data-id');\n\n            let iconsColor = '#f2f2f6';\n            if (colorBrightness > 60) {\n                iconsColor = '#343434';\n            }\n\n            if (el.getAttribute('data-theme-mode') == 'custom') {\n\n                viewerCustomColor = `    \n                [data-id='${docId}'][data-theme-mode='custom'] {\n                    --viewer-primary-color: ${customColor};\n                    --viewer-icons-color: ${iconsColor};\n                    --viewer-icons-hover-bgcolor: ${embedpressDocViewer.adjustHexColor(customColor, -10)};\n                \n                }`;\n                customStyle.innerHTML += viewerCustomColor;\n            }\n        });\n\n        document.head.appendChild(customStyle);\n    }\n}\nembedpressDocViewer.epDocumentsViewerController = () => {\n    const viwerParentEls = document.querySelectorAll('.ep-file-download-option-masked');\n  \n    function handleFullscreenChange() {\n      if (!document.fullscreenElement) {\n        viwerParentEls.forEach((el) => {\n          el.classList.remove('fullscreen-enabled');\n          el.querySelector('.ep-doc-minimize-icon').style.display = 'none';\n          el.querySelector('.ep-doc-fullscreen-icon').style.display = 'flex';\n        });\n      }\n    }\n  \n    function handleClick(event) {\n      event.stopPropagation();\n  \n      const viwerParentEl = event.target.closest('.ep-file-download-option-masked');\n  \n      if (!viwerParentEl) return;\n  \n      const viewerIframeEl = viwerParentEl.querySelector('iframe');\n      if (!viewerIframeEl) return;\n  \n      const iframeSrc = decodeURIComponent(viewerIframeEl.getAttribute('src'));\n      if (!iframeSrc) return;\n  \n      const regex = /(url|src)=([^&]+)/;\n      const match = iframeSrc.match(regex);\n      let fileUrl = match && match[2];\n  \n      if (!fileUrl) {\n        fileUrl = iframeSrc;\n      }\n  \n      const popupIcon = event.target.closest('.ep-doc-popup-icon svg');\n      const printIcon = event.target.closest('.ep-doc-print-icon svg');\n      const downloadcIcon = event.target.closest('.ep-doc-download-icon svg');\n      const minimizeIcon = event.target.closest('.ep-doc-minimize-icon svg');\n      const fullscreenIcon = event.target.closest('.ep-doc-fullscreen-icon svg');\n  \n      if (popupIcon instanceof SVGElement) {\n        window.open(fileUrl, '_blank');\n      } else if (printIcon instanceof SVGElement) {\n        const newTab = window.open(`https://view.officeapps.live.com/op/view.aspx?src=${fileUrl}&wdOrigin=BROWSELINK`, '_blank');\n      } else if (downloadcIcon instanceof SVGElement) {\n        fetch(fileUrl, { mode: 'no-cors' })\n          .then(response => {\n            if (response.ok) {\n              response.blob().then(blob => {\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = fileUrl.substring(fileUrl.lastIndexOf('/') + 1);\n                document.body.appendChild(a);\n                a.click();\n                a.remove();\n              });\n            } else {\n              window.location.href = fileUrl;\n            }\n          })\n          .catch(error => {\n            window.location.href = fileUrl;\n          });\n      } else if (minimizeIcon instanceof SVGElement) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      } else if (fullscreenIcon instanceof SVGElement) {\n        if (viwerParentEl.requestFullscreen) {\n          viwerParentEl.requestFullscreen();\n        } else if (viwerParentEl.webkitRequestFullscreen) {\n          viwerParentEl.webkitRequestFullscreen();\n        } else if (viwerParentEl.msRequestFullscreen) {\n          viwerParentEl.msRequestFullscreen();\n        }\n  \n        viwerParentEl.querySelector(\".ep-doc-minimize-icon\").style.display = 'flex';\n        viwerParentEl.querySelector(\".ep-doc-fullscreen-icon\").style.display = 'none';\n        viwerParentEl.classList.add(\"fullscreen-enabled\");\n      }\n    }\n  \n    function handleDrawIconClick(event) {\n      event.stopPropagation();\n  \n      const drawIcon = event.target.closest('.ep-doc-draw-icon svg');\n      if (!drawIcon) return;\n  \n      const viwerParentEl = drawIcon.closest('.ep-file-download-option-masked');\n      if (!viwerParentEl) return;\n  \n      const canvas = viwerParentEl.querySelector(\".ep-doc-canvas\");\n      const drawToggle = viwerParentEl.querySelector(\".ep-doc-draw-icon svg\");\n      if (!canvas || !drawToggle) return;\n  \n      const ctx = canvas.getContext(\"2d\");\n      let isDrawing = false;\n      let canDraw = false;\n  \n      canvas.addEventListener(\"mousedown\", function (e) {\n        if (canDraw) {\n          isDrawing = true;\n          const rect = canvas.getBoundingClientRect();\n          const scrollX = window.pageXOffset || document.documentElement.scrollLeft;\n          const x = e.pageX - rect.left - scrollX;\n          const y = e.pageY - rect.top;\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n        }\n      });\n  \n      canvas.addEventListener(\"mousemove\", function (e) {\n        if (isDrawing && canDraw) {\n          const rect = canvas.getBoundingClientRect();\n          const scrollX = window.pageXOffset || document.documentElement.scrollLeft;\n          const x = e.pageX - rect.left - scrollX;\n          const y = e.pageY - rect.top;\n          ctx.lineTo(x, y);\n          ctx.stroke();\n        }\n      });\n  \n      canvas.addEventListener(\"mouseup\", function (e) {\n        isDrawing = false;\n      });\n  \n  \n      drawToggle.parentNode.classList.toggle(\"active\");\n      canDraw = drawToggle.parentNode.classList.contains(\"active\");\n      canvas.style.display = canDraw ? \"block\" : \"none\";\n    }\n  \n    document.addEventListener('click', handleClick);\n    document.addEventListener('click', handleDrawIconClick);\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n  };\n  \n\nif (typeof embedpressDocViewer.epDocumentsViewerController === \"function\") {\n    if (jQuery('.wp-block-embedpress-document.embedpress-document-embed').length > 0) {\n        embedpressDocViewer.epDocumentsViewerController();\n    }\n}\n\nif (typeof wp !== 'undefined' && typeof wp.editor !== 'undefined') {\n    if (typeof embedpressDocViewer.viewerStyle === \"function\") {\n        embedpressDocViewer.epDocumentsViewerController();\n    }\n}\n\n\nif (typeof embedpressDocViewer.viewerStyle === \"function\") {\n    if (jQuery('.wp-block-embedpress-document.embedpress-document-embed').length > 0) {\n        embedpressDocViewer.viewerStyle();\n    }\n}\njQuery(window).on(\"elementor/frontend/init\", function () {\n    var filterableGalleryHandler = function ($scope, $) {\n        if (typeof embedpressDocViewer.epDocumentsViewerController === \"function\") {\n            embedpressDocViewer.epDocumentsViewerController();\n        }\n        if (typeof embedpressDocViewer.epDocumentsViewerController === \"function\") {\n            embedpressDocViewer.viewerStyle();\n        }\n\n    };\n    elementorFrontend.hooks.addAction(\"frontend/element_ready/embedpres_document.default\", filterableGalleryHandler);\n});\n\n\nconst myDivs = document.querySelectorAll('.ep-file-download-option-masked');\nconst canDownloadDivs = document.querySelectorAll('.enabled-file-download');\n\n\nmyDivs.forEach(function (div) {\n    div.addEventListener('contextmenu', preventRightClick);\n});\n\nfunction preventRightClick(event) {\n    event.preventDefault();\n}\n\ncanDownloadDivs.forEach(function (div) {\n    div.removeEventListener('contextmenu', preventRightClick);\n});";
var mod_pagespeed_PU34GNPQ46 = "(function(c){function k(b){return b.replace(/^\\//,\"\").replace(/(index|default).[a-zA-Z]{3,4}$/,\"\").replace(/\\/$/,\"\")}var l=k(location.pathname),m=function(b){var d=[],a=false,e=b.dir&&b.dir==\"left\"?\"scrollLeft\":\"scrollTop\";this.each(function(){if(!(this==document||this==window)){var f=c(this);if(f[e]()>0)d.push(this);else{f[e](1);a=f[e]()>0;f[e](0);a&&d.push(this)}}});if(b.el===\"first\"&&d.length)d=[d.shift()];return d};c.fn.extend({scrollable:function(b){return this.pushStack(m.call(this,{dir:b}))},firstScrollable:function(b){return this.pushStack(m.call(this,{el:\"first\",dir:b}))},smoothScroll:function(b){b=b||{};var d=c.extend({},c.fn.smoothScroll.defaults,b);this.die(\"click.smoothscroll\").live(\"click.smoothscroll\",function(a){var e=c(this),f=location.hostname===this.hostname||!this.hostname,g=d.scrollTarget||(k(this.pathname)||l)===l,i=this.hash,h=true;if(!d.scrollTarget&&(!f||!g||!i))h=false;else{f=d.exclude;g=0;for(var j=f.length;h&&g<j;)if(e.is(f[g++]))h=false;f=d.excludeWithin;g=0;for(j=f.length;h&&g<j;)if(e.closest(f[g++]).length)h=false}if(h){d.scrollTarget=b.scrollTarget||i;d.link=this;a.preventDefault();c.smoothScroll(d)}});return this}});c.smoothScroll=function(b,d){var a,e,f,g=0;e=\"offset\";var i=\"scrollTop\",h={};if(typeof b===\"number\"){a=c.fn.smoothScroll.defaults;f=b}else{a=c.extend({},c.fn.smoothScroll.defaults,b||{});if(a.scrollElement){e=\"position\";a.scrollElement.css(\"position\")==\"static\"&&a.scrollElement.css(\"position\",\"relative\")}f=d||c(a.scrollTarget)[e]()&&c(a.scrollTarget)[e]()[a.direction]||0}a=c.extend({link:null},a);i=a.direction==\"left\"?\"scrollLeft\":i;if(a.scrollElement){e=a.scrollElement;g=e[i]()}else e=c(\"html, body\").firstScrollable();h[i]=f+g+a.offset;e.animate(h,{duration:a.speed,easing:a.easing,complete:function(){a.afterScroll&&c.isFunction(a.afterScroll)&&a.afterScroll.call(a.link,a)}})};c.smoothScroll.version=\"1.4\";c.fn.smoothScroll.defaults={exclude:[],excludeWithin:[],offset:0,direction:\"top\",scrollElement:null,scrollTarget:null,afterScroll:null,easing:\"swing\",speed:400}})(jQuery);jQuery(document).ready(function(){jQuery('a.top').smoothScroll();});";
