var mod_pagespeed_9mqZb7Tivz = "(function(root,factory){if(typeof define===\"function\"&&define.amd){define([],factory);}else if(typeof module===\"object\"&&module.exports){module.exports=factory();}else{root.PDFObject=factory();}}(this,function(){\"use strict\";if(typeof window===\"undefined\"||window.navigator===undefined||window.navigator.userAgent===undefined||window.navigator.mimeTypes===undefined){return false;}let pdfobjectversion=\"2.2.6\";let nav=window.navigator;let ua=window.navigator.userAgent;let isIE=(\"ActiveXObject\"in window);let isModernBrowser=(window.Promise!==undefined);let supportsPdfMimeType=(nav.mimeTypes[\"application/pdf\"]!==undefined);let isSafariIOSDesktopMode=(nav.platform!==undefined&&nav.platform===\"MacIntel\"&&nav.maxTouchPoints!==undefined&&nav.maxTouchPoints>1);let isMobileDevice=(isSafariIOSDesktopMode||/Mobi|Tablet|Android|iPad|iPhone/.test(ua));let isSafariDesktop=(!isMobileDevice&&nav.vendor!==undefined&&/Apple/.test(nav.vendor)&&/Safari/.test(ua));let isFirefoxWithPDFJS=(!isMobileDevice&&/irefox/.test(ua)&&ua.split(\"rv:\").length>1)?(parseInt(ua.split(\"rv:\")[1].split(\".\")[0],10)>18):false;let createAXO=function(type){var ax;try{ax=new ActiveXObject(type);}catch(e){ax=null;}return ax;};let supportsPdfActiveX=function(){return!!(createAXO(\"AcroPDF.PDF\")||createAXO(\"PDF.PdfCtrl\"));};let supportsPDFs=(!isMobileDevice&&(isModernBrowser||isFirefoxWithPDFJS||supportsPdfMimeType||(isIE&&supportsPdfActiveX())));let buildURLFragmentString=function(pdfParams){let string=\"\";let prop;if(pdfParams){for(prop in pdfParams){if(pdfParams.hasOwnProperty(prop)){string+=encodeURIComponent(prop)+\"=\"+encodeURIComponent(pdfParams[prop])+\"&\";}}if(string){string=\"#\"+string;string=string.slice(0,string.length-1);}}return string;};let embedError=function(msg,suppressConsole){if(!suppressConsole){}return false;};let emptyNodeContents=function(node){while(node.firstChild){node.removeChild(node.firstChild);}};let getTargetElement=function(targetSelector){let targetNode=document.body;if(typeof targetSelector===\"string\"){targetNode=document.querySelector(targetSelector);}else if(window.jQuery!==undefined&&targetSelector instanceof jQuery&&targetSelector.length){targetNode=targetSelector.get(0);}else if(targetSelector.nodeType!==undefined&&targetSelector.nodeType===1){targetNode=targetSelector;}return targetNode;};let generatePDFJSMarkup=function(targetNode,url,pdfOpenFragment,PDFJS_URL,id,omitInlineStyles){emptyNodeContents(targetNode);let fullURL=PDFJS_URL+\"?file=\"+encodeURIComponent(url)+pdfOpenFragment;let div=document.createElement(\"div\");let iframe=document.createElement(\"iframe\");iframe.src=fullURL;iframe.className=\"pdfobject\";iframe.type=\"application/pdf\";iframe.frameborder=\"0\";iframe.allow=\"fullscreen\";if(id){iframe.id=id;}if(!omitInlineStyles){div.style.cssText=\"position: absolute; top: 0; right: 0; bottom: 0; left: 0;\";iframe.style.cssText=\"border: none; width: 100%; height: 100%;\";targetNode.style.position=\"relative\";targetNode.style.overflow=\"auto\";}div.appendChild(iframe);targetNode.appendChild(div);targetNode.classList.add(\"pdfobject-container\");return targetNode.getElementsByTagName(\"iframe\")[0];};let generatePDFObjectMarkup=function(embedType,targetNode,targetSelector,url,pdfOpenFragment,width,height,id,title,omitInlineStyles){emptyNodeContents(targetNode);let embed=document.createElement(embedType);if('object'===embedType){embed.data=url+pdfOpenFragment;}else{embed.src=url+pdfOpenFragment;}embed.className=\"pdfobject\";embed.type=\"application/pdf\";embed.title=title;if(id){embed.id=id;}if(embedType===\"iframe\"){embed.allow=\"fullscreen\";}if(!omitInlineStyles){let style=(embedType===\"embed\")?\"overflow: auto;\":\"border: none;\";if(targetSelector&&targetSelector!==document.body){style+=\"width: \"+width+\"; height: \"+height+\";\";}else{style+=\"position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;\";}embed.style.cssText=style;}targetNode.classList.add(\"pdfobject-container\");targetNode.appendChild(embed);return targetNode.getElementsByTagName(embedType)[0];};let embed=function(url,targetSelector,options){let selector=targetSelector||false;let opt=options||{};let id=(typeof opt.id===\"string\")?opt.id:\"\";let page=opt.page||false;let pdfOpenParams=opt.pdfOpenParams||{};let fallbackLink=opt.fallbackLink||true;let width=opt.width||\"100%\";let height=opt.height||\"100%\";let title=opt.title||\"Embedded PDF\";let assumptionMode=(typeof opt.assumptionMode===\"boolean\")?opt.assumptionMode:true;let forcePDFJS=(typeof opt.forcePDFJS===\"boolean\")?opt.forcePDFJS:false;let supportRedirect=(typeof opt.supportRedirect===\"boolean\")?opt.supportRedirect:false;let omitInlineStyles=(typeof opt.omitInlineStyles===\"boolean\")?opt.omitInlineStyles:false;let suppressConsole=(typeof opt.suppressConsole===\"boolean\")?opt.suppressConsole:false;let forceIframe=(typeof opt.forceIframe===\"boolean\")?opt.forceIframe:false;let forceObject=(typeof opt.forceObject===\"boolean\")?opt.forceObject:false;let PDFJS_URL=opt.PDFJS_URL||false;let targetNode=getTargetElement(selector);let fallbackHTML=\"\";let pdfOpenFragment=\"\";let fallbackHTML_default=\"<p>This browser does not support inline PDFs. Please download the PDF to view it: <a href='[url]'>Download PDF</a></p>\";if(typeof url!==\"string\"){return embedError(\"URL is not valid\",suppressConsole);}if(!targetNode){return embedError(\"Target element cannot be determined\",suppressConsole);}if(page){pdfOpenParams.page=page;}pdfOpenFragment=buildURLFragmentString(pdfOpenParams);if(forcePDFJS&&PDFJS_URL){return generatePDFJSMarkup(targetNode,url,pdfOpenFragment,PDFJS_URL,id,omitInlineStyles);}if(supportsPDFs||(assumptionMode&&!isMobileDevice)){let embedtype=(forceIframe||supportRedirect||isSafariDesktop)?\"iframe\":(forceObject?\"object\":\"embed\");return generatePDFObjectMarkup(embedtype,targetNode,targetSelector,url,pdfOpenFragment,width,height,id,title,omitInlineStyles);}if(PDFJS_URL){return generatePDFJSMarkup(targetNode,url,pdfOpenFragment,PDFJS_URL,id,omitInlineStyles);}if(fallbackLink){fallbackHTML=(typeof fallbackLink===\"string\")?fallbackLink:fallbackHTML_default;targetNode.innerHTML=fallbackHTML.replace(/\\[url\\]/g,url);}return embedError(\"This browser does not support embedded PDFs\",suppressConsole);};return{embed:function(a,b,c){return embed(a,b,c);},pdfobjectversion:(function(){return pdfobjectversion;})(),supportsPDFs:(function(){return supportsPDFs;})()};}));";
var mod_pagespeed_TyEe6DrcIF = "/**\n * Note: This is complex initialization, but it is necessary for Gutenberg and Elementor compatibility. There are some known issues in Gutenberg that require this complex setup.\n */\n\n// Event listener for when the DOM content is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n\n\n  const overlayMask = document.createElement('div');\n  overlayMask.className = 'overlay-mask';\n\n\n  // Select all embed wrappers with the class 'ep-embed-content-wraper'\n  let embedWrappers = document.querySelectorAll('.ep-embed-content-wraper');\n\n  // Initialize the player for each embed wrapper\n  embedWrappers.forEach(wrapper => {\n    initPlayer(wrapper);\n  });\n\n  // Mutation observer to detect any changes in the DOM\n  const observer = new MutationObserver(mutations => {\n    mutations.forEach(mutation => {\n      const addedNodes = Array.from(mutation.addedNodes);\n      addedNodes.forEach(node => {\n        traverseAndInitPlayer(node);\n      });\n    });\n  });\n\n  // Start observing changes in the entire document body and its subtree\n  observer.observe(document.body, { childList: true, subtree: true });\n\n  // Recursive function to traverse the DOM and initialize the player for each embed wrapper\n  function traverseAndInitPlayer(node) {\n    if (node.nodeType === Node.ELEMENT_NODE && node.classList.contains('ep-embed-content-wraper')) {\n      initPlayer(node);\n    }\n\n    if (node.hasChildNodes()) {\n      node.childNodes.forEach(childNode => {\n        traverseAndInitPlayer(childNode);\n      });\n    }\n  }\n\n\n\n\n});\n\n\n// Function to initialize the player for a given wrapper\nfunction initPlayer(wrapper) {\n  const playerId = wrapper.getAttribute('data-playerid');\n\n  // Get the options for the player from the wrapper's data attribute\n  let options = document.querySelector(`[data-playerid=\"${playerId}\"]`)?.getAttribute('data-options');\n  \n  if(!options) {\n    return false;\n  }\n\n  // Parse the options string into a JSON object\n  options = JSON.parse(options);  \n\n  // Create DOM elements from the icon strings\n  const pipPlayIconElement = document.createElement('div');\n  pipPlayIconElement.className = 'pip-play';\n  pipPlayIconElement.innerHTML = '<svg width=\"20\" height=\"20\" viewBox=\"-0.15 -0.112 0.9 0.9\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin\" class=\"jam jam-play\"><path fill=\"#fff\" d=\"M.518.357A.037.037 0 0 0 .506.306L.134.08a.039.039 0 0 0-.02-.006.038.038 0 0 0-.038.037v.453c0 .007.002.014.006.02a.039.039 0 0 0 .052.012L.506.37A.034.034 0 0 0 .518.358zm.028.075L.174.658A.115.115 0 0 1 .017.622.109.109 0 0 1 0 .564V.111C0 .05.051 0 .114 0c.021 0 .042.006.06.017l.372.226a.11.11 0 0 1 0 .189z\"/></svg>';\n  pipPlayIconElement.style.display = 'none';\n\n\n  const pipPauseIconElement = document.createElement('div');\n  pipPauseIconElement.className = 'pip-pause';\n  pipPauseIconElement.innerHTML = '<svg fill=\"#fff\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 2.5 2.5\" xml:space=\"preserve\"><path d=\"M1.013.499 1.006.5V.499H.748a.054.054 0 0 0-.054.054v1.394c0 .03.024.054.054.054h.266a.054.054 0 0 0 .054-.054V.553a.054.054 0 0 0-.054-.054zm.793 1.448V.553a.054.054 0 0 0-.054-.054L1.745.5V.499h-.258a.054.054 0 0 0-.054.054v1.394c0 .03.024.054.054.054h.265a.054.054 0 0 0 .054-.054z\"/></svg>';\n\n  const pipCloseElement = document.createElement('div');\n  pipCloseElement.className = 'pip-close';\n  pipCloseElement.innerHTML = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 0.9 0.9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M.198.198a.037.037 0 0 1 .053 0L.45.397.648.199a.037.037 0 1 1 .053.053L.503.45l.198.198a.037.037 0 0 1-.053.053L.45.503.252.701A.037.037 0 0 1 .199.648L.397.45.198.252a.037.037 0 0 1 0-.053z\" fill=\"#fff\"/></svg>';\n\n  // Check if the player has not been initialized for this wrapper\n  if (playerId && !wrapper.classList.contains('plyr-initialized')) {\n\n\n    let selector = `[data-playerid=\"${playerId}\"] .ose-embedpress-responsive`;\n\n    if (options.self_hosted && options.hosted_format === 'video') {\n      selector = `[data-playerid=\"${playerId}\"] .ose-embedpress-responsive video`;\n    }\n    else if (options.self_hosted && options.hosted_format === 'audio') {\n      selector = `[data-playerid=\"${playerId}\"] .ose-embedpress-responsive audio`;\n    }\n\n\n    // Set the main color of the player\n    document.querySelector(`[data-playerid=\"${playerId}\"]`).style.setProperty('--plyr-color-main', options.player_color);\n    document.querySelector(`[data-playerid=\"${playerId}\"].custom-player-preset-1, [data-playerid=\"${playerId}\"].custom-player-preset-3, [data-playerid=\"${playerId}\"].custom-player-preset-4`)?.style.setProperty('--plyr-range-fill-background', '#ffffff');\n\n    // Set the poster thumbnail for the player\n    if (document.querySelector(`[data-playerid=\"${playerId}\"] iframe`)) {\n      document.querySelector(`[data-playerid=\"${playerId}\"] iframe`).setAttribute('data-poster', options.poster_thumbnail);\n    }\n\n\n    // Define the controls to be displayed\n    const controls = [\n      'play-large',\n      options.restart ? 'restart' : '',\n      options.rewind ? 'rewind' : '',\n      'play',\n      options.fast_forward ? 'fast-forward' : '',\n      'progress',\n      'current-time',\n      'duration',\n      'mute',\n      'volume',\n      'captions',\n      'settings',\n      options.pip ? 'pip' : '',\n      'airplay',\n      options.download ? 'download' : '',\n      options.fullscreen ? 'fullscreen' : '',\n\n    ].filter(control => control !== '');\n\n    // Create a new Plyr player instance with the specified options and controls\n    const player = new Plyr(selector, {\n      controls: controls,\n      seekTime: 10,\n      poster: options.poster_thumbnail,\n      storage: {\n        enabled: true,\n        key: 'plyr_volume'\n      },\n      displayDuration: true,\n      tooltips: { controls: options.player_tooltip, seek: options.player_tooltip },\n      hideControls: options.hide_controls,\n      youtube: {\n        ...(options.autoplay && { autoplay: options.autoplay }),\n        ...(options.start && { start: options.start }),\n        ...(options.end && { end: options.end }),\n        ...(options.rel && { rel: options.rel }),\n        ...(options.fullscreen && { fs: options.fullscreen })\n      },\n      vimeo: {\n        byline: false,\n        portrait: false,\n        title: false,\n        speed: true,\n        transparent: false,\n        controls: false,\n        ...(options.t && { t: options.t }),\n        ...(options.vautoplay && { autoplay: options.vautoplay }),\n        ...(options.autopause && { autopause: options.autopause }),\n        ...(options.dnt && { dnt: options.dnt }),\n      }\n    });\n\n    // Mark the wrapper as initialized\n    wrapper.classList.add('plyr-initialized');\n  }\n\n  // Check for the existence of the player's pip button at regular intervals\n  const pipInterval = setInterval(() => {\n\n    let playerPip = document.querySelector(`[data-playerid=\"${playerId}\"] [data-plyr=\"pip\"]`);\n    if (playerPip) {\n      clearInterval(pipInterval);\n\n      let options = document.querySelector(`[data-playerid=\"${playerId}\"]`).getAttribute('data-options');\n\n      options = JSON.parse(options);\n      if (!options.self_hosted) {\n\n        const iframeSelector = document.querySelector(`[data-playerid=\"${playerId}\"] .plyr__video-wrapper`);\n\n        // Add click event listener to toggle the pip mode\n        playerPip.addEventListener('click', () => {\n          iframeSelector.classList.toggle('pip-mode');\n\n          let parentElement = iframeSelector.parentElement;\n          while (parentElement) {\n            parentElement.style.zIndex = '9999';\n            parentElement = parentElement.parentElement;\n          }\n\n        });\n\n\n        if (options.pip) {\n          iframeSelector.appendChild(pipPlayIconElement);\n          iframeSelector.appendChild(pipPauseIconElement);\n          iframeSelector.appendChild(pipCloseElement);\n          const pipPlay = document.querySelector(`[data-playerid=\"${playerId}\"] .plyr__video-wrapper .pip-play`);\n          const pipPause = document.querySelector(`[data-playerid=\"${playerId}\"] .plyr__video-wrapper .pip-pause`);\n          const pipClose = document.querySelector(`[data-playerid=\"${playerId}\"] .plyr__video-wrapper .pip-close`);\n\n          console.log(pipClose);\n\n          pipClose.addEventListener('click', () => {\n            iframeSelector.classList.remove('pip-mode');\n            console.log(iframeSelector.classList);\n          });\n\n\n          iframeSelector.addEventListener('click', () => {\n            const ariaPressedValue = document.querySelector(`[data-playerid=\"${playerId}\"] .plyr__controls [data-plyr=\"play\"]`).getAttribute('aria-pressed');\n\n            console.log(ariaPressedValue);\n            if (ariaPressedValue === 'true') {\n              pipPause.style.display = 'none';\n              pipPlay.style.display = 'flex';\n            } else {\n              pipPlay.style.display = 'none';\n              pipPause.style.display = 'flex';\n            }\n          });\n\n        }\n\n\n      }\n    }\n\n  }, 200);\n\n}\n";
