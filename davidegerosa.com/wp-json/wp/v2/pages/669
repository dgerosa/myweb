{"id":669,"date":"2016-03-01T11:09:32","date_gmt":"2016-03-01T11:09:32","guid":{"rendered":"http:\/\/davidegerosa.com\/?page_id=669"},"modified":"2016-03-01T11:09:32","modified_gmt":"2016-03-01T11:09:32","slug":"installpython","status":"publish","type":"page","link":"https:\/\/davidegerosa.com\/installpython\/","title":{"rendered":"The best way to install Python"},"content":{"rendered":"<p style=\"text-align:justify;\">Python is cool, especially if you a scientist. All sort of scientific algorithms are already there (written and debugged!), you just have to use them.<\/p>\n<p style=\"text-align:justify;\">This is a step-by-step guide to the best way I found to install and use python for\u00a0science, the easy (less hackable) way comes first, and the long way comes next.<\/p>\n<h3>The easy way on mac: homebrew<\/h3>\n<p style=\"text-align:justify;\">Most (if not all) unix systems already come with a python distribution installed. However, it is advisable to install a local distribution and do your scientific stuff from there&#8230; If you screw something up, you can just delete everything and your OS is safe. I will also stay with python 2 for now, \u00a0but see below for some info on python 3 (see also\u00a0<a href=\"https:\/\/wiki.python.org\/moin\/Python2orPython3\" target=\"_blank\" rel=\"noopener noreferrer\">here<\/a> for more).<\/p>\n<p style=\"text-align:justify;\">The easiest way to safely install python on\u00a0a MAC is <a href=\"https:\/\/brew.sh\/\" target=\"_blank\" rel=\"noopener noreferrer\">homebrew<\/a>.\u00a0Homebrew installs a new version of python (by default the latest 2.x version available) and set is as default.<\/p>\n<pre>brew install python2<\/pre>\n<p style=\"text-align:justify;\">Next, we want a <code>virtualenv<\/code>. Python&#8217;s virtual environments are kind\u00a0of separate boxes, where you can install modules\u00a0and packages locally. You can have different boxes for different projects, or a single box for all your python stuff. Again, if you screw something up, you can just delete the box and start again. Now type<\/p>\n<pre>pip install virtualenv\nvirtualenv ~\/box<\/pre>\n<p>The virtual environment is physically\u00a0located in ~\/box. You have created the box, but you&#8217;re still out of it. To get into the box<\/p>\n<pre>chmod u+x\u00a0${HOME}\/box\/bin\/activate\nsource ${HOME}\/box\/bin\/activate\n<\/pre>\n<p>Now you&#8217;re in the box, and you should see &#8220;(box)&#8221; close to your username in the terminal. To get out of the box, type<\/p>\n<pre>deactivate<\/pre>\n<p>and the label &#8220;(box)&#8221; should disappear from your terminal.<\/p>\n<p>You may want to add this last command in your .bashrc<\/p>\n<pre>echo \"\" &gt;&gt;${HOME}\/.bashrc\necho \"alias inthebox='source ${HOME}\/box\/bin\/activate' \" &gt;&gt; ${HOME}\/.bashrc\nsource\u00a0${HOME}\/.bashrc\n<\/pre>\n<p>Now type &#8220;inthebox&#8221; and &#8220;deactivate&#8221; to get in and out of your new virtual environment.<\/p>\n<h3>Science is fun again: install packages<\/h3>\n<p>And you&#8217;re done. <code>Virtualenv<\/code> comes with <code>pip<\/code>, the tool to install python modules from the Python Package Index <a href=\"https:\/\/pypi.python.org\/pypi\" target=\"_blank\" rel=\"noopener noreferrer\">PyPi<\/a>. From within your box, to install a package type<\/p>\n<pre>pip install PACKAGE_NAME<\/pre>\n<p>But first of all, upgrade pip itself. It&#8217;s not needed strictly, but my experience is that it may fix issues, especially on mac\u00a0OS X<\/p>\n<pre>pip install --upgrade setuptools pip<\/pre>\n<p>You can try with <a href=\"http:\/\/www.numpy.org\" target=\"_blank\" rel=\"noopener noreferrer\">numpy<\/a>, <a href=\"http:\/\/www.scipy.org\" target=\"_blank\" rel=\"noopener noreferrer\">scipy<\/a>, <a href=\"http:\/\/matplotlib.org\" target=\"_blank\" rel=\"noopener noreferrer\">matploltib<\/a>, my own <a href=\"http:\/\/davidegerosa.com\/precession\/\" target=\"_blank\" rel=\"noopener noreferrer\">precession<\/a>\u00a0module to study black holes and my own <a href=\"http:\/\/davidegerosa.com\/filltex\/\">filltex<\/a> module to handle Latex bibliographies.,<\/p>\n<h3>Update: use python 2 and python 3 together&#8230;<\/h3>\n<p>As I mentioned, python 3 code is not really backward compatible with python 2. Python 3 is more recent, but there&#8217;s a lot of legacy code around that works only in python 2, so you might still need it (see <a href=\"http:\/\/python-future.org\/compatible_idioms.html\" target=\"_blank\" rel=\"noopener noreferrer\">here<\/a> to write nice python 2-3 compatible code).<\/p>\n<p>With virtual environments, you can have both python 2 and pyhton 3 on the same system, and switch between the two as needed. First, install a python 3 distribution:<\/p>\n<pre>brew install python3<\/pre>\n<p>Next, create another virtual environment and specify that the default python executable should be python 3<\/p>\n<pre class=\"p1\">python3 -m venv box3<\/pre>\n<p>Now we have two boxes, <code>box<\/code>\u00a0runs python 2 and <code>box3<\/code>\u00a0runs python 3. \u00a0Now, let&#8217;s add the two boxes to our <code>bashrc<\/code><\/p>\n<pre>echo \"\" &gt;&gt;${HOME}\/.bashrc \necho \"alias py2='source ${HOME}\/box\/bin\/activate' \" &gt;&gt; ${HOME}\/.bashrc \necho \"alias py3='source ${HOME}\/box3\/bin\/activate' \" &gt;&gt; ${HOME}\/.bashrc \nsource\u00a0${HOME}\/.bashrc<\/pre>\n<p>If you type <code>py2<\/code>\u00a0or <code>py3<\/code>\u00a0you enter the respective box:<\/p>\n<pre class=\"p1\"><span class=\"s2\">py2<\/span>\n<span class=\"s1\">python -V<\/span>\n<span class=\"s1\">&gt;&gt;&gt;&gt; Python 2.7.13<\/span>\n<span class=\"s2\">py3<\/span>\n<span class=\"s1\">python -V<\/span>\n<span class=\"s1\"><span class=\"s2\">&gt;&gt;&gt;&gt; <\/span>Python 3.6.1<\/span><\/pre>\n<p>Again, <code>deactivate<\/code>\u00a0will take you out of both boxes. If you need to use a package under both python 2 and python 3, you will need to install it twice via <code>pip<\/code>, in both boxes.<\/p>\n<h3>The hard\u00a0way (for the PROs)<\/h3>\n<p style=\"text-align:justify;\">Homebrew is great, but you can of course do the same manually. The procedure below is somehow taken from this\u00a0<a title=\"stackoverflow.com\" href=\"https:\/\/stackoverflow.com\/questions\/5506110\/is-it-possible-to-install-another-version-of-python-to-virtualenv\/5507373#5507373?newreg=78941aae422b4ddb9ed6ff43ebc2a0c4\">stack overflow<\/a>\u00a0question. Instructions here are given again for python 2 on mac OSX \u00a0but can be easily generalized to any unix system (e.g. replacing curl with wget and so on&#8230;).<\/p>\n<p>First let&#8217;s install a python \u00a0distribution. Go to \u00a0<a href=\"https:\/\/www.python.org\/ftp\/python\/\" target=\"_blank\" rel=\"noopener noreferrer\">this URL<\/a>:<\/p>\n<pre>https:\/\/www.python.org\/ftp\/python\/<\/pre>\n<p>and check what is the latest version of python 2. At the time of writing, this is 2.7.15, change the following lines if you want a different version.\u00a0I am going to assume\u00a0you want to put your new python distribution in a directory called &#8220;localpython&#8221; in your home directory<\/p>\n<pre>cd\nmkdir localpython\ncd localpython\ncurl\u00a0 https:\/\/www.python.org\/ftp\/python\/2.7.15\/Python-2.7.15.tgz &gt; Python-2.7.15.tgz\ntar -zxvf Python-2.7.15.tgz\ncd Python-2.7.15\n\n# \"make clean\" may be necessary here for earlier versions\n.\/configure --prefix=${HOME}\/localpython --enable-optimizations\nmake\nmake install\n<\/pre>\n<p>If, at any time, you need to start again, just<\/p>\n<pre>rm -rf ${HOME}\/localpython<\/pre>\n<h3><\/h3>\n<p>and you should be fine.<\/p>\n<p>Now, virtualenv. Go to<a href=\"https:\/\/pypi.python.org\/pypi\/virtualenv\"> this URL<\/a>:<\/p>\n<pre>https:\/\/pypi.python.org\/pypi\/virtualenv<\/pre>\n<p>and check what is the latest version of virtualenv. At the time of writing, this is 15.1.0, change the following lines if you want a different version.<\/p>\n<pre>cd ${HOME}\/localpython\ncurl\u00a0 https:\/\/pypi.python.org\/packages\/source\/v\/virtualenv\/virtualenv-15.1.0.tar.gz &gt; virtualenv-15.1.0.tar.gz\ntar -zxvf virtualenv-15.1.0.tar.gz\ncd virtualenv-15.1.0\n${HOME}\/localpython\/bin\/python setup.py install<\/pre>\n<p>Update: unfortunately pypi.python.org changed their link structure and the link above doesn&#8217;t work anymore. You need to go that webpage with a browser and get the tar.gz manually. At the time of writing, even the virtualenv official documentation has not been updated yet.<\/p>\n<p>Now we create a virtual environment specifying it should run python from our local distribution. Again, we call\u00a0our virtual environment &#8220;box&#8221; and place it in localpython<\/p>\n<pre>cd ${HOME}\/localpython \n${HOME}\/localpython\/bin\/virtualenv box --python=${HOME}\/localpython\/bin\/python<\/pre>\n<p>If you get an error involving <strong>zlib<\/strong>, this is likely to be related to an upgrade of the OS: get back to the homebrew solution. If you&#8217;re still alive, type<\/p>\n<pre>chmod u+x\u00a0${HOME}\/localpython\/box\/bin\/activate\nsource ${HOME}\/localpython\/box\/bin\/activate\n<\/pre>\n<p>You can test\u00a0everything with<\/p>\n<pre>which python\n&gt;&gt;&gt; \u00a0${HOME}\/localpython\/box\/bin\/python\n<\/pre>\n<p>If you enter a python console, you should get\u00a0today&#8217;s date and time (or yesterday&#8217;s if you found these instructions exhausting)<\/p>\n<pre>python\n&gt;&gt;&gt; \u00a0Python 2.7.10 (default, TODAY! )<\/pre>\n<p>To get out of the box, type<\/p>\n<pre>deactivate<\/pre>\n<p>As before, we can add these commands to\u00a0our .bashrc<\/p>\n<pre>echo \"\" &gt;&gt;${HOME}\/.bashrc\necho \"alias inthebox='source ${HOME}\/localpython\/box\/bin\/activate' \" &gt;&gt; ${HOME}\/.bashrc\nsource\u00a0${HOME}\/.bashrc\n<\/pre>\n<h3>Update: no pip, no fun!<\/h3>\n<p>I recently got across the\u00a0situation that I did not want to use a virtual environment. This was because I was on a\u00a0supercomputer which already had a python distribution installed and\u00a0I didn&#8217;t want to deal with the scipy dependancies (e.g. lbpack etc.).<\/p>\n<p>So, how to get pip and install modules\u00a0anyway? The python people have a <a href=\"https:\/\/pip.pypa.io\/en\/stable\/installing\/\" target=\"_blank\" rel=\"noopener noreferrer\">script<\/a> precisely for this:<\/p>\n<pre class=\"p1\"><span class=\"s1\">wget https:\/\/bootstrap.pypa.io\/get-pip.py\npython get-pip.py --user<\/span><\/pre>\n<p>Note the &#8211;user flag, which is good if you can&#8217;t sudo (as it was for me on the Caltech supercomputer). \u00a0Now, you only need to remember to install modules using this slightly different line:<\/p>\n<pre class=\"p1\"><span class=\"s1\">python -m pip install MODULENAME --user<\/span><\/pre>\n<p>Done! Enjoy python on your supercomputer.<\/p>\n<h3>Update: mac and backends, what a mess!<\/h3>\n<p>If you installed python on mac and tried to use <a href=\"https:\/\/matplotlib.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">matplotlib<\/a>\u00a0to make beautiful plots for your papers, you might get into this error<\/p>\n<pre>RuntimeError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework.<\/pre>\n<p>This has to to with the default backend of matplotlib, which macOS doesn&#8217;t really like. The solution is<\/p>\n<pre class=\"p1\"><span class=\"s1\">echo \"backend: TkAgg\" &gt;&gt; ~\/.matplotlib\/matplotlibrc<\/span><\/pre>\n<h3>Now\u00a0you can fly<\/h3>\n<p>Seriously&#8230; just <a href=\"https:\/\/pypi.python.org\/pypi\/antigravity\/0.1\" target=\"_blank\" rel=\"noopener noreferrer\">import antigravity<\/a><\/p>\n<div id=\"attachment_388\" style=\"width: 528px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/xkcd.com\/353\/\" target=\"_blank\" rel=\"noopener noreferrer\"><img aria-describedby=\"caption-attachment-388\" loading=\"lazy\" class=\"aligncenter wp-image-388 size-full\" src=\"https:\/\/precessiondocstemp.files.wordpress.com\/2015\/09\/python.png\" alt=\"python\" width=\"518\" height=\"588\" \/><\/a><p id=\"caption-attachment-388\" class=\"wp-caption-text\"><small> Credit: <a href=\"https:\/\/xkcd.com\/353\/\" target=\"_blank\" rel=\"noopener noreferrer\">xkcd n. 353<\/a><\/small><\/p><\/div>\n","protected":false},"excerpt":{"rendered":"<p>Python is cool, especially if you a scientist. All sort of scientific algorithms are already there (written and debugged!), you just have to use them. This is a step-by-step guide to the best way I found to install and use &hellip; <a href=\"https:\/\/davidegerosa.com\/installpython\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":697,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_coblocks_attr":"","_coblocks_dimensions":"","_coblocks_responsive_height":"","_coblocks_accordion_ie_support":"","_mi_skip_tracking":false},"_links":{"self":[{"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/pages\/669"}],"collection":[{"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/comments?post=669"}],"version-history":[{"count":0,"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/pages\/669\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/media\/697"}],"wp:attachment":[{"href":"https:\/\/davidegerosa.com\/wp-json\/wp\/v2\/media?parent=669"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}